---
title: "Some tips to work with SQLite database"
date: "2023-10-20"
categories: [database, sqlite]
---

Databases are very useful for handling large-than-memory datasets, a common problem in Data Science. Several database engines work very well with R and Posit has a nice [guide overview](https://solutions.posit.co/connections/db/) of them.

[SQLite](https://www.sqlite.org/index.html) is a very popular engine due its simplicity. You do not need to install a database server on your environment because SQLite stores the database in a simple single file that you can modify, copy, store at Google Drive etc.

I have been using it for some time and collected some practical tips for some practical situations.

First, lets have some data to use at the examples.

```{r}
#| message: false
library(dplyr)
library(lubridate)
library(nycflights13)

flights <- flights %>% 
  select(year, month, day, hour, minute) %>% 
  mutate(departure = make_date(year, month, day))

glimpse(flights)
```

I specifically created a variable called `departure` to have a date type on our example dataset.

## Dates

Natively, SQLite databases does not handle dates and this may be difficult in the beginning. Let's explore some options to handle dates with SQLite.

First, we need to create a database in a temporary file using two packages: `DBI` and `RSQLite`.

```{r}
library(DBI)
library(RSQLite)

database_file <- tempfile()
conn <- dbConnect(RSQLite::SQLite(), database_file)
```

Observe that the `conn` object is NOT the database, is just a connection instruction to the database stored in a file.

Lets write the `flights` tibble to the database.

```{r}
dbWriteTable(conn, name = "flights_table", value = flights)
```

Now, let's take a look how the tibble was stored.

```{r}
tbl(conn, "flights_table") %>%
  head() %>% 
  collect()
```

The departure variable is no more a human-readable date, it is now a integer value in Unix time. That means: "the number of seconds since 1970-01-01 00:00:00 UTC". Now very practical...

Thus, there as two options for this: you may convert your date variable to a string variable (`as.character(...)`) or use an argument called [`extended_types`](https://rsqlite.r-dbi.org/reference/sqlite) with the `dbConnect` command.

If you store the date variable as string, you will need to reconvert it to date wherever your collect data from your database, what is not very practical. Let's see how the `extented_types` option works.

First, let's close our connection.

```{r}
dbDisconnect(conn)
```

We will modify our connection using this argument.

```{r}
conn <- dbConnect(RSQLite::SQLite(), database_file, extended_types = TRUE)
```

And now we will overwrite the data at the same table.

```{r}
dbWriteTable(conn, name = "flights_table", value = flights, overwrite = TRUE)
```

Let's see the result.

```{r}
tbl(conn, "flights_table") %>% head() %>% collect()
```

Voil√†! Now we can now see human-readable dates with a UNIX time variable.

## Parallel write

One nice thing about databases is parallel writing. Imagine a [function being executed in parallel](https://furrr.futureverse.org) and writing the results at the same database and even at the same table.

There are some nice tricks to allow it with SQLite. Basically, those are the options that I use.

```{r}
conn <- DBI::dbConnect(RSQLite::SQLite(), database_file, extended_types = TRUE, synchronous = NULL)
dbExecute(conn, "PRAGMA busy_timeout = 5000")
dbExecute(conn, "BEGIN IMMEDIATE TRANSACTION")
dbWriteTable(conn = conn, name = "flights_table", value = flights, append = TRUE)
dbExecute(conn, "COMMIT TRANSACTION")
dbDisconnect(conn)
```

These options will secure that your connection waits other connections to conclude and immediately [commit](https://en.wikipedia.org/wiki/Commit_(data_management)) the transaction to the database.

## Delete table and vacuum

When you delete a table inside a database, the physical space used by this table is not automatically made available. The database will still have the same size in disk. To free this space, we need to vacuum the database.

Lets delete out last example database and do some testing.

```{r}
unlink(database_file)
```

We will create a new database with two equal tables.

```{r}
conn <- dbConnect(RSQLite::SQLite(), database_file, extended_types = TRUE)
dbWriteTable(conn = conn, name = "flights_table_1", value = flights)
dbWriteTable(conn = conn, name = "flights_table_2", value = flights)
dbDisconnect(conn)
```

What's is the size of the file?

```{r}
fs::file_size(database_file)
```

Now, lets delete one of the tables.

```{r}
conn <- dbConnect(RSQLite::SQLite(), database_file, extended_types = TRUE)
dbRemoveTable(conn = conn, name = "flights_table_1")
dbDisconnect(conn)

fs::file_size(database_file)
```

Same size... Let's vacuum it!

```{r}
conn <- dbConnect(RSQLite::SQLite(), database_file, extended_types = TRUE)
dbExecute(conn, "VACUUM;")
dbDisconnect(conn)

fs::file_size(database_file)
```

And we have a smaller size now!

## Session info

```{r}
sessionInfo()
```
