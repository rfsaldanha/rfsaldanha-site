{
  "hash": "f2661a2d9d79da9f17be83210779ca8d",
  "result": {
    "markdown": "---\ntitle: \"Age-adjusted COVID-19 mortality rates for Brazilian municipalities\"\ndate: \"2023-11-07\"\ncategories: [covid19, tidyrates]\n---\n\n\nOn this post, we will compute crude and age-adjusted COVID-19 mortality rates for Brazilian municipalities, from 2020 to 2022 per epidemiological weeks.\n\nWe will use the `{tidyverse}` and other packages that I will call later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## COVID-19 mortality data\n\nThe Brazilian official source of mortality data is a health information system called \"Sistema de Informações de Mortalidade -- SIM\". This system receives mortality data from the municipalities and states and consolidates it.\n\nThe SIM dataset is published yearly, with a year lag. This time is needed to consolidate all the data and perform checks. The SIM datasets of 2019, 2020, and 2021 are officially published and the 2022 dataset is published as \"preliminary\", which means that modifications and updates are possible.\n\nThe datasets are publicly available on the [OpenDataSUS website](https://opendatasus.saude.gov.br/dataset/sim) as CSV files. I downloaded the datasets from 2019 to 2023, as the 2023 may have some death records that occurred in 2022.\n\nThe code chunk below has the CSV column types specification to read these files with the `{readr}` package. The chunk is folded to save screen space ;-)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndate_format <- \"%d%m%Y\"\n\ncols_spec <- cols(\n  ORIGEM = col_double(),\n  TIPOBITO = col_double(),\n  DTOBITO = col_date(format = date_format),\n  HORAOBITO = col_character(),\n  NATURAL = col_character(),\n  CODMUNNATU = col_double(),\n  DTNASC = col_date(format = date_format),\n  IDADE = col_double(),\n  SEXO = col_double(),\n  RACACOR = col_double(),\n  ESTCIV = col_double(),\n  ESC = col_double(),\n  ESC2010 = col_double(),\n  SERIESCFAL = col_double(),\n  OCUP = col_character(),\n  CODMUNRES = col_double(),\n  LOCOCOR = col_double(),\n  CODESTAB = col_character(),\n  ESTABDESCR = col_character(),\n  CODMUNOCOR = col_double(),\n  IDADEMAE = col_double(),\n  ESCMAE = col_double(),\n  ESCMAE2010 = col_double(),\n  SERIESCMAE = col_double(),\n  OCUPMAE = col_double(),\n  QTDFILVIVO = col_character(),\n  QTDFILMORT = col_character(),\n  GRAVIDEZ = col_double(),\n  SEMAGESTAC = col_double(),\n  GESTACAO = col_double(),\n  PARTO = col_double(),\n  OBITOPARTO = col_double(),\n  PESO = col_character(),\n  TPMORTEOCO = col_double(),\n  OBITOGRAV = col_double(),\n  OBITOPUERP = col_double(),\n  ASSISTMED = col_double(),\n  EXAME = col_character(),\n  CIRURGIA = col_character(),\n  NECROPSIA = col_double(),\n  LINHAA = col_character(),\n  LINHAB = col_character(),\n  LINHAC = col_character(),\n  LINHAD = col_character(),\n  LINHAII = col_character(),\n  CAUSABAS = col_character(),\n  CB_PRE = col_character(),\n  COMUNSVOIM = col_character(),\n  DTATESTADO = col_date(format = date_format),\n  CIRCOBITO = col_double(),\n  ACIDTRAB = col_double(),\n  FONTE = col_double(),\n  NUMEROLOTE = col_double(),\n  TPPOS = col_character(),\n  DTINVESTIG = col_date(format = date_format),\n  CAUSABAS_O = col_character(),\n  DTCADASTRO = col_date(format = date_format),\n  ATESTANTE = col_double(),\n  STCODIFICA = col_character(),\n  CODIFICADO = col_character(),\n  VERSAOSIST = col_number(),\n  VERSAOSCB = col_number(),\n  FONTEINV = col_double(),\n  DTRECEBIM = col_date(format = date_format),\n  ATESTADO = col_character(),\n  DTRECORIGA = col_date(format = date_format),\n  CAUSAMAT = col_character(),\n  ESCMAEAGR1 = col_character(),\n  ESCFALAGR1 = col_character(),\n  STDOEPIDEM = col_double(),\n  STDONOVA = col_double(),\n  DIFDATA = col_character(),\n  NUDIASOBCO = col_double(),\n  NUDIASOBIN = col_character(),\n  DTCADINV = col_date(format = date_format),\n  TPOBITOCOR = col_double(),\n  DTCONINV = col_date(format = date_format),\n  FONTES = col_character(),\n  TPRESGINFO = col_double(),\n  TPNIVELINV = col_character(),\n  NUDIASINF = col_character(),\n  DTCADINF = col_date(format = date_format),\n  MORTEPARTO = col_double(),\n  DTCONCASO = col_date(format = date_format),\n  FONTESINF = col_character(),\n  ALTCAUSA = col_double(),\n  CONTADOR = col_double()\n)\n```\n:::\n\n\nThe code chunk bellow reads the CSV file with the column types specification from above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim19 <- readr::read_csv2(file = \"../../covidbr/Mortalidade_Geral_2019.csv\", col_types = cols_spec)\nsim20 <- readr::read_csv2(file = \"../../covidbr/Mortalidade_Geral_2020.csv\", col_types = cols_spec)\nsim21 <- readr::read_csv2(file = \"../../covidbr/Mortalidade_Geral_2021.csv\", col_types = cols_spec)\nsim22 <- readr::read_csv2(file = \"../../covidbr/DO22OPEN.csv\", col_types = cols_spec)\nsim23 <- readr::read_csv2(file = \"../../covidbr/DO23OPEN.csv\", col_types = cols_spec)\n```\n:::\n\n\nAfter reading the files, let's create one single data frame with the variables we will use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid <- bind_rows(sim19, sim20, sim21, sim22, sim23) %>% #<1>\n  filter(CAUSABAS == \"B342\") %>% #<2>\n  filter(DTOBITO >= as.Date(\"2020-01-01\") & DTOBITO <= as.Date(\"2022-12-31\")) %>% #<3>\n  select(DTOBITO, DTNASC, CODMUNRES) %>% #<4>\n  na.omit() #<5>\n\nrm(sim19, sim20, sim21, sim22, sim23, cols_spec, date_format) #<6>\n```\n:::\n\n\n1.  Bind the `sim` objects into a single data frame.\n\n2.  Filter the records where the basic cause of death is COVID-19 (ICD-10 code B342).\n\n3.  Filter the records keeping only the deaths that occurred between 2019 and 2022.\n\n4.  Select the date of death (`DTOBITO`) and date of birth (`DTNASC`) to compute the age and the municipality code of residence (`CODMUNRES`).\n\n5.  Omit rows with missing data.\n\n6.  Remove the `sim*` objects as we will no longer need them.\n\nOur dataset has 702284 records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(covid, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   DTOBITO    DTNASC     CODMUNRES\n   <date>     <date>         <dbl>\n 1 2020-05-21 1942-08-10    120010\n 2 2020-05-27 1943-02-19    120010\n 3 2020-05-27 1975-01-14    120025\n 4 2020-05-05 1972-06-10    120040\n 5 2020-05-25 1939-10-04    120040\n 6 2020-05-25 1965-02-14    120040\n 7 2020-05-25 1946-06-17    120040\n 8 2020-05-30 1937-05-17    120080\n 9 2020-05-30 1959-06-08    120013\n10 2020-05-13 1982-08-22    120040\n```\n:::\n:::\n\n\n### Age groups\n\nNow we need to label the records into age groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid <- covid %>%\n  mutate(\n    age = year(as.period(interval(start = DTNASC, end = DTOBITO))), #<1>\n    age_group = case_when( #<2>\n      age <= 4 ~ \"From 0 to 4 years\", #<2>\n      age >= 5 & age <= 9 ~ \"From 5 to 9 years\", #<2>\n      age >= 10 & age <= 14 ~ \"From 10 to 14 years\", #<2>\n      age >= 15 & age <= 19 ~ \"From 15 to 19 years\", #<2>\n      age >= 20 & age <= 24 ~ \"From 20 to 24 years\", #<2>\n      age >= 25 & age <= 29 ~ \"From 25 to 29 years\", #<2>\n      age >= 30 & age <= 34 ~ \"From 30 to 34 years\", #<2>\n      age >= 35 & age <= 39 ~ \"From 35 to 39 years\", #<2>\n      age >= 40 & age <= 44 ~ \"From 40 to 44 years\", #<2>\n      age >= 45 & age <= 49 ~ \"From 45 to 49 years\", #<2>\n      age >= 50 & age <= 54 ~ \"From 50 to 54 years\", #<2>\n      age >= 55 & age <= 59 ~ \"From 55 to 59 years\", #<2>\n      age >= 60 & age <= 64 ~ \"From 60 to 64 years\", #<2>\n      age >= 65 & age <= 69 ~ \"From 65 to 69 years\", #<2>\n      age >= 70 & age <= 74 ~ \"From 70 to 74 years\", #<2>\n      age >= 75 & age <= 79 ~ \"From 75 to 79 years\", #<2>\n      age >= 80 ~ \"From 80 years or more\" #<2>\n    ), #<2>\n    age_group = fct_relevel( #<3>\n      age_group, #<3>\n      \"From 0 to 4 years\", \"From 5 to 9 years\",     #<3>\n      \"From 10 to 14 years\", \"From 15 to 19 years\", #<3>\n      \"From 20 to 24 years\", \"From 25 to 29 years\", #<3>\n      \"From 30 to 34 years\", \"From 35 to 39 years\", #<3>\n      \"From 40 to 44 years\", \"From 45 to 49 years\", #<3>\n      \"From 50 to 54 years\", \"From 55 to 59 years\", #<3>\n      \"From 60 to 64 years\", \"From 65 to 69 years\", #<3>\n      \"From 70 to 74 years\", \"From 75 to 79 years\", #<3>\n      \"From 80 years or more\"                       #<3>\n    )  #<3>\n  ) %>%\n  select(date = DTOBITO, code_muni = CODMUNRES, age_group) #<4>\n```\n:::\n\n\n1.  Compute the age based on the date of birth and date of death. For this, I used some functions from the `{lubridate}` package.\n2.  Label the age groups.\n3.  Convert `age_group` to an ordered factor variable.\n4.  Select and rename the desired variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(covid, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   date       code_muni age_group            \n   <date>         <dbl> <fct>                \n 1 2020-05-21    120010 From 75 to 79 years  \n 2 2020-05-27    120010 From 75 to 79 years  \n 3 2020-05-27    120025 From 45 to 49 years  \n 4 2020-05-05    120040 From 45 to 49 years  \n 5 2020-05-25    120040 From 80 years or more\n 6 2020-05-25    120040 From 55 to 59 years  \n 7 2020-05-25    120040 From 70 to 74 years  \n 8 2020-05-30    120080 From 80 years or more\n 9 2020-05-30    120013 From 60 to 64 years  \n10 2020-05-13    120040 From 35 to 39 years  \n```\n:::\n:::\n\n\nLet's take a look at the epidemiological curves per date and age group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid %>%\n  group_by(date, age_group) %>%\n  summarise(events = n()) %>%\n  ungroup() %>%\n  ggplot(aes(x = date, y = events)) +\n  geom_line() +\n  facet_wrap(~age_group) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](std_br_covid_rates_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nIt is pretty clear that COVID-19 mortality incidence is related to age. Thus, to compare mortality rates of different regions, we need to compute age-adjusted rates.\n\n### Aggregate data\n\nLet's aggregate our dataset by municipality of residence, epidemiological and epidemiological week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_agg <- covid %>%\n  group_by(code_muni, date, age_group) %>%       #<1>\n  summarise(events = n()) %>%                    #<1>\n  ungroup() %>%                                  #<1>\n  group_by(code_muni) %>%                        #<2>\n  complete(                                      #<2>\n    date = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2022-12-31\"), by = \"day\"), #<2>\n    age_group = unique(covid$age_group),         #<2>\n    fill = list(events = 0)                      #<2>\n  ) %>%                                          #<2>\n  ungroup() %>%                                  #<2>\n  mutate(                                        #<3>\n    year = epiyear(date),                        #<3>\n    week = epiweek(date)                         #<3>\n  ) %>%                                          #<3>\n  group_by(code_muni, year, week, age_group) %>% #<4>\n  summarise(events = sum(events)) %>%            #<4>\n  ungroup()                                      #<4>\n```\n:::\n\n\n1.  First, we aggregate the COVID-19 per municipality of residence, age group and date. But this aggregation have some gaps on date and age groups, as there are no deaths at some specific dates and age groups.\n2.  We can complete these gaps using the `tidyr::complete`, supplying the dates interval and age groups. We will fill the `events` variables with zero values.\n3.  With the complete dataset, we compute the epidemiological year and week.\n4.  And aggregate by municipality code, year, week and age_group.\n\n## Population data\n\nWe need to add the population data to compute the rates. Let's prepare our population data using the `brpop` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmun_pop <- brpop::mun_pop() %>%\n  filter(year %in% 2020:2022) %>%\n  rename(population = pop) %>%\n  filter(age_group != \"Total\") %>%\n  rename(code_muni = mun)\n```\n:::\n\n\nAs there is no population estimates for 2022 yet, we will repeat the population from 2021.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmun_pop_2022 <- mun_pop %>%\n  filter(year == 2021) %>%\n  mutate(year = 2022)\n\nmun_pop <- bind_rows(mun_pop, mun_pop_2022)\nrm(mun_pop_2022)\n```\n:::\n\n\nLet's join this population data with the COVID-19 data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_agg <- right_join(covid_agg, mun_pop, by = c(\"code_muni\", \"year\", \"age_group\")) %>% \n  pivot_longer(cols = c(\"events\", \"population\"))\n\nhead(covid_agg, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n   code_muni  year  week age_group           name       value\n       <dbl> <dbl> <dbl> <chr>               <chr>      <int>\n 1    110000  2020     1 From 0 to 4 years   events         0\n 2    110000  2020     1 From 0 to 4 years   population     0\n 3    110000  2020     1 From 5 to 9 years   events         0\n 4    110000  2020     1 From 5 to 9 years   population     0\n 5    110000  2020     1 From 10 to 14 years events         0\n 6    110000  2020     1 From 10 to 14 years population     0\n 7    110000  2020     1 From 15 to 19 years events         0\n 8    110000  2020     1 From 15 to 19 years population     0\n 9    110000  2020     1 From 20 to 24 years events         0\n10    110000  2020     1 From 20 to 24 years population     0\n```\n:::\n:::\n\n\n## Reference population\n\nWe will use as reference population, the year of 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ref <- mun_pop %>%\n  filter(year == 2020) %>%\n  group_by(age_group) %>%\n  summarise(population = sum(population)) %>%\n  ungroup()\n\nprint(pop_ref)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 2\n   age_group             population\n   <chr>                      <int>\n 1 From 0 to 4 years       14730300\n 2 From 10 to 14 years     14805480\n 3 From 15 to 19 years     15790890\n 4 From 20 to 24 years     17233273\n 5 From 25 to 29 years     16985859\n 6 From 30 to 34 years     17205414\n 7 From 35 to 39 years     17026565\n 8 From 40 to 44 years     15602995\n 9 From 45 to 49 years     13652508\n10 From 5 to 9 years       14650284\n11 From 50 to 54 years     12617802\n12 From 55 to 59 years     11257270\n13 From 60 to 64 years      9383724\n14 From 65 to 69 years      7349241\n15 From 70 to 74 years      5408657\n16 From 75 to 79 years      3614384\n17 From 80 years or more    4441046\n```\n:::\n:::\n\n\n## Crude and adjusted rates\n\nTo compute the crude and age-adjusted rates, we will use the `{tidyrates}` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrates <- tidyrates::rate_adj_direct(\n  .data = covid_agg, \n  .std = pop_ref, \n  .keys = c(\"code_muni\", \"year\", \"week\"), \n  .progress = FALSE\n) %>%\n  mutate(\n    crude.rate = crude.rate * 100000,\n    adj.rate = adj.rate * 100000,\n    lci = lci * 100000,\n    uci = uci * 100000,\n  )\n```\n:::\n\n\nThat's it! Let's take a look at the rates for Rio de Janeiro, RJ on 2022.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrates %>%\n  filter(code_muni == 330455) %>%\n  filter(year == 2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 52 × 7\n   code_muni  year  week crude.rate adj.rate   lci   uci\n       <dbl> <dbl> <dbl>      <dbl>    <dbl> <dbl> <dbl>\n 1    330455  2022     1      0.251    0.175 0.101 0.297\n 2    330455  2022     2      1.17     0.839 0.662 1.06 \n 3    330455  2022     3      3.81     2.70  2.37  3.06 \n 4    330455  2022     4      5.58     3.96  3.57  4.40 \n 5    330455  2022     5      4.44     3.11  2.76  3.49 \n 6    330455  2022     6      2.83     2.00  1.72  2.32 \n 7    330455  2022     7      1.98     1.43  1.20  1.71 \n 8    330455  2022     8      0.989    0.682 0.528 0.880\n 9    330455  2022     9      0.398    0.283 0.185 0.428\n10    330455  2022    10      0.310    0.217 0.133 0.346\n# ℹ 42 more rows\n```\n:::\n:::\n\n\nLet's save the `rates` data frame as a parquet and CSV file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrow::write_parquet(x = rates, sink = \"../../covidbr/covid19_adj_rates.parquet\")\nwrite_csv2(x = rates, file = \"../../covidbr/covid19_adj_rates.csv\")\n```\n:::\n\n\nThese files are available for download at Zenodo: [![](https://img.shields.io/badge/doi-10.5281/zenodo.10078882-green.svg)](https://doi.org/10.5281/zenodo.10078882)\n\n## Mortality rates graph for capitals\n\nThe graph bellow present the crude and adjusted rates at the Brazilian capitals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncapitals <- geobr::read_capitals(as_sf = TRUE, showProgress = FALSE) %>%\n  mutate(\n    code_muni = ifelse(code_muni == 2803203, 2800308, code_muni),\n    name_muni = ifelse(code_muni == 2800308, \"Aracaju\", name_muni)\n  ) %>%\n  mutate(code_muni = as.numeric(substr(code_muni, 0, 6))) %>%\n  select(-year) %>%\n  sf::st_drop_geometry()\n\nrates_for_plot <- rates %>%\n  right_join(capitals, by = \"code_muni\") %>%\n  mutate(week = paste0(year, \"-\", str_pad(week, 2, pad = \"0\"))) %>%\n  select(week, name_muni, crude.rate, adj.rate) %>%\n  pivot_longer(cols = c(\"crude.rate\", \"adj.rate\")) \n\nggplot() +\n  geom_line(data = rates_for_plot, aes(x = week, y = value, group = name, color = name)) +\n  facet_wrap(~name_muni) +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\", \n    legend.direction = \"horizontal\", \n    axis.text.x=element_blank(),\n    axis.ticks.x=element_blank()\n  ) +\n  labs(\n    title = \"Age standardized COVID-19 mortality rates for Brazilian capitals\", \n    x = \"Epi Week\", \n    y = \"Rate per 100,000 inhab.\", \n    color = NULL\n  )\n```\n\n::: {.cell-output-display}\n![](std_br_covid_rates_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Paris\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.0   dplyr_1.1.3    \n [5] purrr_1.0.2     readr_2.1.4     tidyr_1.3.0     tibble_3.2.1   \n [9] ggplot2_3.4.4   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.4        xfun_0.41           htmlwidgets_1.6.2  \n [4] brpop_0.3.0         processx_3.8.2      RApiSerialize_0.1.2\n [7] callr_3.7.3         tzdb_0.4.0          vctrs_0.6.4        \n[10] tools_4.3.2         ps_1.7.5            generics_0.1.3     \n[13] curl_5.1.0          parallel_4.3.2      proxy_0.4-27       \n[16] fansi_1.0.5         pkgconfig_2.0.3     KernSmooth_2.23-22 \n[19] data.table_1.14.8   checkmate_2.3.0     assertthat_0.2.1   \n[22] RcppParallel_5.1.7  lifecycle_1.0.3     compiler_4.3.2     \n[25] farver_2.1.1        multidplyr_0.1.3    munsell_0.5.0      \n[28] qs_0.25.5           codetools_0.2-19    class_7.3-22       \n[31] htmltools_0.5.7     yaml_2.3.7          pillar_1.9.0       \n[34] crayon_1.5.2        epitools_0.5-10.1   classInt_0.4-10    \n[37] parallelly_1.36.0   tidyselect_1.2.0    digest_0.6.33      \n[40] stringi_1.7.12      future_1.33.0       sf_1.0-14          \n[43] listenv_0.9.0       labeling_0.4.3      arrow_13.0.0.1     \n[46] fastmap_1.1.1       grid_4.3.2          colorspace_2.1-0   \n[49] cli_3.6.1           magrittr_2.0.3      utf8_1.2.4         \n[52] e1071_1.7-13        withr_2.5.2         scales_1.2.1       \n[55] backports_1.4.1     bit64_4.0.5         timechange_0.2.0   \n[58] httr_1.4.7          rmarkdown_2.25      globals_0.16.2     \n[61] tidyrates_0.0.1     bit_4.0.5           hms_1.1.3          \n[64] stringfish_0.15.8   evaluate_0.23       knitr_1.45         \n[67] rlang_1.1.2         Rcpp_1.0.11         DBI_1.1.3          \n[70] glue_1.6.2          geobr_1.8.1         rstudioapi_0.15.0  \n[73] vroom_1.6.4         jsonlite_1.8.7      R6_2.5.1           \n[76] units_0.8-4        \n```\n:::\n:::\n",
    "supporting": [
      "std_br_covid_rates_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}