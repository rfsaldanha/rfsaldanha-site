{
  "hash": "a3851bc83062e16815a19cb2e047de80",
  "result": {
    "markdown": "---\ntitle: \"SQLite database conversion to DuckDB and Parquet files\"\ndate: \"2023-10-24\"\ncategories: [database, sqlite, duckdb, parquet]\n---\n\n\n[DuckDB](https://duckdb.org) is a relatively new database that works in a file, just like SQLite, but is very fast and designed for data science workflows.\n\nI am writing this post to cover the following scenario: you already have a SQLite database and want to convert it to DuckDB, and also export it to a [parquet](https://parquet.apache.org) file.\n\n## SQLite database\n\nWe need a SQLite database example to later convert it to DuckDB. Let's use the `mtcars` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(lubridate)\n\nglimpse(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n```\n:::\n:::\n\n\nAnd write `mtcars` in a SQLite database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqlite_database_file <- tempfile()\n\nconn_sqlite <- DBI::dbConnect(\n  RSQLite::SQLite(), \n  sqlite_database_file, \n  extended_types = TRUE\n)\n\nDBI::dbWriteTable(conn_sqlite, name = \"mtcars_table\", value = mtcars, overwrite = TRUE)\n```\n:::\n\n\nLet's take a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(conn_sqlite, \"mtcars_table\") %>% head() %>% collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1  21       6   160   110  3.9   2.62  16.5     0     1     4     4\n2  21       6   160   110  3.9   2.88  17.0     0     1     4     4\n3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\n4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\n5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\n6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\n```\n:::\n:::\n\n\n::: callout-note\nNote that this database could be written directly using DuckDB, but this is an example about database conversion.\n:::\n\n## From SQLite to DuckDB\n\nFirst, we need to create our DuckDB database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduckdb_database_file <- tempfile()\n\nconn_duckdb <- DBI::dbConnect(\n  duckdb::duckdb(), \n  duckdb_database_file\n)\n```\n:::\n\n\nTo import our data, we can use a [DuckDB extension to read SQLite databases](https://duckdb.org/docs/guides/import/query_sqlite.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbExecute(conn_duckdb, \"INSTALL sqlite;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nDBI::dbExecute(conn_duckdb, \"LOAD sqlite;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbExecute(conn_duckdb, glue::glue(\"CREATE TABLE mtcars_table AS SELECT * FROM sqlite_scan('{sqlite_database_file}', 'mtcars_table');\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n:::\n\n\nGreat! Now we have the same database on DuckDB.\n\n## From DuckDB to Parquet\n\nIt is very simple to [export](https://duckdb.org/docs/guides/import/parquet_export) a DuckDB table to a parquet file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparquet_file <- tempfile()\n\nDBI::dbExecute(conn_duckdb, glue::glue(\"COPY (SELECT * FROM 'mtcars_table') TO '{parquet_file}' (FORMAT 'PARQUET')\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n:::\n\n\nAnd that's it! Let's close the connections.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbDisconnect(conn_sqlite)\nDBI::dbDisconnect(conn_duckdb, shutdown = TRUE)\n```\n:::\n\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Paris\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] lubridate_1.9.3 dplyr_1.1.3    \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.4       cli_3.6.1         knitr_1.44        rlang_1.1.1      \n [5] xfun_0.40         DBI_1.1.3         purrr_1.0.2       generics_0.1.3   \n [9] jsonlite_1.8.7    bit_4.0.5         glue_1.6.2        dbplyr_2.3.4     \n[13] htmltools_0.5.6.1 hms_1.1.3         fansi_1.0.5       rmarkdown_2.25   \n[17] evaluate_0.22     tibble_3.2.1      fastmap_1.1.1     yaml_2.3.7       \n[21] lifecycle_1.0.3   memoise_2.0.1     duckdb_0.9.1      compiler_4.3.1   \n[25] blob_1.2.4        RSQLite_2.3.1     htmlwidgets_1.6.2 timechange_0.2.0 \n[29] pkgconfig_2.0.3   rstudioapi_0.15.0 digest_0.6.33     R6_2.5.1         \n[33] tidyselect_1.2.0  utf8_1.2.4        pillar_1.9.0      magrittr_2.0.3   \n[37] bit64_4.0.5       tools_4.3.1       cachem_1.0.8     \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}