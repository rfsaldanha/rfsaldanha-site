{
  "hash": "4f4f5a49cc5bd9a6fdc035601587a3cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Handling 187 millions hospital admissions in Brazil with DuckDB\"\nsubtitle: \"A patient geographical flow study\"\ndate: \"2024-06-11\"\nbibliography: ref.bib\ncategories: [duckdb, sih]\nlightbox: auto\n---\n\n\n\nOn ideal circumstances, any hospital admission would take place at the same city of residence of the patient. This facilitates the patient and family dislocation to the hospital, staying in a more familiar surrounding, and making the whole process less stressful. But, to a management point of view, this requires that all cities equal present a complete and extremely expensive set of hospital units, able to take care from simple diagnosis to complex organs transfusions\n\nThus, a national health system is usually organized under hierarchy and centralization principles. On this setting, smaller cities with less population have more simple resources and bigger cities have more complex resources at disposal. This administrative optimization comes with a cost: patients will likely need to travel to another city in order to receive a more complex health treatment, creating a flow of patients seeking for health care.\n\nWe will study here the flow of patients for hospital admissions using Brazilian datasets from its Universal Health System (SUS). This data is originally from the [DataSUS](https://datasus.saude.gov.br/), the informatics department of the Brazilian Health Ministry.\n\n## Dataset\n\nWe will use the Hospital Admissions data prepared by the [PCDaS/Fiocruz](https://pcdas.icict.fiocruz.br) with the original DataSUS data. This dataset is already cleaned, enriched and fully documented. I downloaded the CSV version, which contains 5,210 files, totaling 315.7 GB.\n\nOn these files, each row represents a hospital admission, and several variables of interest are available, including the patient's municipality code of residence, the hospital's code municipality and the date of the hospital admission.\n\nIt is a lot of data to process, making it very unpractical to just load the files into the computer memory.\n\nThe [DuckDB](https://duckdb.org/) database is very interesting for this case:\n\n-   I will not need to create or have access to a database server, the DuckDB database is a just a file on your computer.\n\n-   DuckDB have dedicated functions to parse and import CSV files straight to the database.\n\n-   It is very fast for aggregate and other analytical functions that need to access all rows.\n\n-   It is seamless integrated with R and `{dplyr}` verbs.\n\n## Database creation\n\nFirst, we need to call some packages and create the database and create an empty table on it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(duckdb)\nlibrary(duckplyr)\nlibrary(glue)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(duckdb(), dbdir = \"pcdas_sih.duckdb\", read_only = FALSE) #<1>\n\ndbExecute(con, \"CREATE TABLE sih (\n    cod_res VARCHAR,\n    cod_int VARCHAR,\n    dt_inter DATE,\n    def_ident VARCHAR,\n    def_car_int VARCHAR\n)\")  #<2>\n```\n:::\n\n\n\n1.  Create an empty database on the computer.\n2.  Create the `sih` table with a schema.\n\nNow, we will populate the `sih` table with a loop.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyears <- 2008:2023\n\nfor(y in years){\n  message(y)\n  query <- glue(\"INSERT INTO sih \n          SELECT res_codigo_adotado AS cod_res, \n          int_MUNCOD AS cod_int, \n          DT_INTER AS dt_inter, def_ident, def_car_int \n          FROM read_csv('/media/raphael/lacie/pcdas_sih/csv/*[y]*.csv',\n          delim = ',',\n          header = true,\n          dateformat = '%Y%m%d',\n          types = {'res_codigo_adotado': 'VARCHAR',\n          'int_MUNCOD': 'VARCHAR',\n          'dt_inter': 'DATE',\n          'def_ident': 'VARCHAR',\n          'def_car_int': 'VARCHAR'},\n          union_by_name = true\n          )\", .open = \"[\", .close = \"]\")\n  \n  dbExecute(con, query)\n}\n\ndbDisconnect(con)\n```\n:::\n\n\n\nThe query may seem a little complicated, but it is simple if we look at it by parts:\n\n-   For each year `y` from 2008 to 2023...\n\n-   Using the connection `con`, `INSERT INTO` the table `sih` the selected columns (changing its original names) `FROM` the csv files. This is achieved with the DuckDB's function `read_csv`. Here, DuckDB will parse the CSV files contents that have the year `y` on its name (*`[y]`*`.csv`).\n\n::: callout-note\nI tried to read all 5,210 files at once, but I received messages about \"Too many files open\". This loop required fewer files to be open at the same time, being very effective.\n:::\n\n::: callout-tip\nOne nice thing here is that we are reading into our table [only the variables we want]{.underline} from the CSV files, reducing the database size and saving time.\n:::\n\nAfter importing all CSV files, the database occupies **829MB** on disk and the `sih` table have **187,735,977 rows**.\n\n## Flow computation\n\nLet's compute the yearly flow of patients starting in 2008.\n\nTo compute the amount of patients that goes from a municipality to another on one year, we will do a grouping operation and observe the number of rows on each group.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(duckdb(), dbdir = \"../../flowsus/pcdas_sih.duckdb\", read_only = FALSE) #<1>\n\nsih_tbl <- dplyr::tbl(con, \"sih\") #<2>\n\nres_geral <- sih_tbl |> #<3>\n  filter(def_ident == \"Normal\") |> #<4>\n  filter(year(dt_inter) >= 2008 & year(dt_inter) <= 2023) |> #<4>\n  mutate(year = year(dt_inter)) |> #<5>\n  summarise( #<56\n    weight = n(), #<6>\n    .by = c(year, cod_res, cod_int) #<6>\n  ) |> #<6>\n  collect() #<7>\n\ndbDisconnect(con) #<8>\n```\n:::\n\n\n\n1.  Connect with the database on read-only mode.\n2.  Create a virtual connection to the `sih` table.\n3.  `res_geral` will be the object that will receive the results.\n4.  Filter the hospital admissions, considering only the typical admissions (this excludes long-stays admissions, like mental healthcare) and filter hospital admissions that took place between 2008 and 2023.\n5.  Create a new variable: the year of the hospital admission.\n6.  Summarize the table, by year and municipality of residence and destination, creating a `weight` variable that will receive the amount with rows.\n7.  Executes the query on the DuckDB database, returning a tibble ready-to-use.\n8.  Disconnect the database.\n\nThe `res_geral` tibble present 1,395,512 rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(res_geral)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n   year cod_res cod_int weight\n  <dbl> <chr>   <chr>    <dbl>\n1  2008 292060  292250     100\n2  2008 290323  290323     757\n3  2008 292910  292250       5\n4  2008 292260  291120      81\n5  2008 291690  291760      36\n6  2008 292340  292340    1327\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nThere are rows where the municipality of origin and destiny are the same. This represents the hospital admissions that took place at the [same municipality of residence of the patient]{.underline}.\n:::\n\nDiscarding these loop-cases, the biggest observed flow occurred on 2021, when 28,375 hospital admissions occurred with patients from Jaboatão dos Guararapes, PE being admitted to hospitals from Recife, PE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_geral |> \n  filter(cod_res != cod_int) |>\n  arrange(-weight) |>\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n    year cod_res cod_int weight\n   <dbl> <chr>   <chr>    <dbl>\n 1  2021 260790  261160   28375\n 2  2023 260790  261160   28329\n 3  2022 260790  261160   28142\n 4  2019 260790  261160   27268\n 5  2017 260790  261160   27222\n 6  2018 260790  261160   27025\n 7  2016 260790  261160   25254\n 8  2020 260790  261160   24134\n 9  2015 260790  261160   23970\n10  2013 260790  261160   23718\n```\n\n\n:::\n:::\n\n\n\nIn total, 58,216,831 hospital admissions in Brazil occurred outside the patient's residence municipality between 2008 and 2023.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_geral |> \n  filter(cod_res != cod_int) |>\n  pull(weight) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 58216831\n```\n\n\n:::\n:::\n\n\n\nAnd 124,835,812 hospital admissions in Brazil occurred at the same patient's residence municipality between 2008 and 2023.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_geral |> \n  filter(cod_res == cod_int) |>\n  pull(weight) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 124835812\n```\n\n\n:::\n:::\n\n\n\n## Map\n\nThe flow of patients deserves a map! Let's take a look at the last year available (2023).\n\nWe will need more packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(geobr)\nlibrary(sf)\nlibrary(edgebundle)\nlibrary(igraph)\nlibrary(ggplot2)\n```\n:::\n\n\n\nFor the map, we will need the geographical coordinates of the municipalities and the state boundaries. The [geobr](https://ipeagit.github.io/geobr/) package is very handy for this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseats <- read_municipal_seat(showProgress = FALSE) |>\n  mutate(code_muni = substr(code_muni, 0, 6))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing year/date 2010\n```\n\n\n:::\n\n```{.r .cell-code}\nstates <- read_state(showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing year/date 2010\n```\n\n\n:::\n:::\n\n\n\nPrepare the municipal seats database.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseats <- seats |>\n  mutate(code_muni = substr(code_muni, 0, 6)) |>\n  mutate(longitude = st_coordinates(seats)[,1],\n         latitude = st_coordinates(seats)[,2]) |>\n  st_drop_geometry() |>\n  select(code_muni, longitude, latitude)\n\nhead(seats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  code_muni longitude   latitude\n1    110001 -61.99982 -11.935540\n2    110002 -63.03327  -9.908463\n3    110003 -60.54431 -13.499763\n4    110004 -61.44294 -11.433865\n5    110005 -60.81843 -13.195033\n6    110006 -60.55507 -13.130564\n```\n\n\n:::\n:::\n\n\n\nAnd prepare the flow data for 2023. I will remove flows with less than 10 hospital admissions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_2023 <- res_geral |>\n  filter(weight >= 10) |>\n  filter(cod_res %in% seats$code_muni & cod_int %in% seats$code_muni) |>\n  filter(cod_res != cod_int) |>\n  filter(year == 2023) |>\n  select(2:4)\n\nhead(res_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  cod_res cod_int weight\n  <chr>   <chr>    <dbl>\n1 291990  292400      91\n2 293060  292720      30\n3 290687  292720      88\n4 291125  292720      16\n5 292045  292840      44\n6 292240  292870     565\n```\n\n\n:::\n:::\n\n\n\nNow, we will create an [igraph](https://r.igraph.org/) object to represent the network.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_2023 <- graph_from_data_frame(d = res_2023, directed = TRUE, vertices = seats)\n```\n:::\n\n\n\nAnd pairs of coordinates and vertices objects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy_2023 <- cbind(V(g_2023)$longitude, V(g_2023)$latitude)\nverts_2023 <- data.frame(x = V(g_2023)$longitude, y = V(g_2023)$latitude)\n```\n:::\n\n\n\nTo plot the vertices, we will use a nice function from the [edgebundle](https://schochastics.github.io/edgebundle/) package. This may take some time to be computed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbundle_2023 <- edge_bundle_path(g_2023, xy_2023, max_distortion = 12, weight_fac = 2, segments = 50)\n\npbundle_2023 <- pbundle_2023 %>% \n  left_join(res_2023 |> mutate(id = row_number()) |> select(c(id, weight)), by=c('group' = 'id')) |> \n  st_as_sf(coords=c('x', 'y'), crs=4326) |>\n  group_by(group) |>\n  summarise(weight=mean(weight), do_union=FALSE) |>\n  arrange(weight) |>\n  st_cast(\"LINESTRING\")\n```\n:::\n\n\n\nNow, all needed objects are ready. Let's plot it.\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(\n    data = states,\n    col = \"white\", linewidth = 0.1, fill = NA\n  ) +\n  geom_sf(\n    data = pbundle_2023, aes(group = group, linewidth = log(weight), color = log(weight), alpha = 0.5),\n  ) +\n  scale_linewidth(range = c(0.001, .2)) +\n  scale_colour_gradient(low = \"#3d0038\", high = \"#f993f1\") +\n  geom_point(\n    data = verts_2023, aes(x, y),\n    stroke = 0,\n    col = \"white\", size = 0.1, alpha = 0.3\n  ) +\n  labs(title = \"Patient's flow for hospital admission, 2023\") +\n  ggraph::theme_graph(background = \"black\") +\n  theme(plot.title = element_text(color = \"white\"), legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](hospital_admissions_flow_files/figure-html/unnamed-chunk-16-1.png){width=4200}\n:::\n:::\n\n\n\nYou can observe that some of the patient's flow are its state of residence. On those cases, the patient is likely traveling to the state capital or to some big city within the state to receive healthcare. But the states size in Brazil varies a lot: the Amazonas state, by example, has an area bigger than Spain and France together. Also, other kind of flow occurs between states, typically from the interior or capital city from one state to the capital or regional center of the other state.\n\nOne important thing to observe is that some of those flows are expected, like the case where patients need to be admitted by hospitals with very specific capacities due to the patient's disease and conditions.\n\nThe analysis of patient flows in a health system is very interesting and can guide health managers to better understand and organize the health system. I published with some colleagues on this theme some time ago ([@Saldanha2019a], [@Xavier2019] and [@fonsecaGeographicAccessibilityCancer2022]).\n\n## Session info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.0 (2024-04-24)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language en_US:en\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Paris\n date     2024-06-12\n pandoc   3.1.11 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version date (UTC) lib source\n blob           1.2.4   2023-03-17 [1] CRAN (R 4.4.0)\n cachem         1.1.0   2024-05-16 [1] CRAN (R 4.4.0)\n class          7.3-22  2023-05-03 [4] CRAN (R 4.3.1)\n classInt       0.4-10  2023-09-05 [1] CRAN (R 4.4.0)\n cli            3.6.2   2023-12-11 [1] CRAN (R 4.4.0)\n collections    0.3.7   2023-01-05 [1] CRAN (R 4.4.0)\n colorspace     2.1-0   2023-01-23 [1] CRAN (R 4.4.0)\n curl           5.2.1   2024-03-01 [1] CRAN (R 4.4.0)\n data.table     1.15.4  2024-03-30 [1] CRAN (R 4.4.0)\n DBI          * 1.2.3   2024-06-02 [1] CRAN (R 4.4.0)\n dbplyr         2.5.0   2024-03-19 [1] CRAN (R 4.4.0)\n digest         0.6.35  2024-03-11 [1] CRAN (R 4.4.0)\n dplyr        * 1.1.4   2023-11-17 [1] CRAN (R 4.4.0)\n duckdb       * 0.10.2  2024-05-01 [1] CRAN (R 4.4.0)\n duckplyr     * 0.4.0   2024-05-21 [1] CRAN (R 4.4.0)\n e1071          1.7-14  2023-12-06 [1] CRAN (R 4.4.0)\n edgebundle   * 0.4.2   2023-12-16 [1] CRAN (R 4.4.0)\n evaluate       0.24.0  2024-06-10 [1] CRAN (R 4.4.0)\n fansi          1.0.6   2023-12-08 [1] CRAN (R 4.4.0)\n farver         2.1.2   2024-05-13 [1] CRAN (R 4.4.0)\n fastmap        1.2.0   2024-05-15 [1] CRAN (R 4.4.0)\n generics       0.1.3   2022-07-05 [1] CRAN (R 4.4.0)\n geobr        * 1.9.0   2024-04-18 [1] CRAN (R 4.4.0)\n ggforce        0.4.2   2024-02-19 [1] CRAN (R 4.4.0)\n ggplot2      * 3.5.1   2024-04-23 [1] CRAN (R 4.4.0)\n ggraph         2.2.1   2024-03-07 [1] CRAN (R 4.4.0)\n ggrepel        0.9.5   2024-01-10 [1] CRAN (R 4.4.0)\n glue         * 1.7.0   2024-01-09 [1] CRAN (R 4.4.0)\n graphlayouts   1.1.1   2024-03-09 [1] CRAN (R 4.4.0)\n gridExtra      2.3     2017-09-09 [1] CRAN (R 4.4.0)\n gtable         0.3.5   2024-04-22 [1] CRAN (R 4.4.0)\n htmltools      0.5.8.1 2024-04-04 [1] CRAN (R 4.4.0)\n htmlwidgets    1.6.4   2023-12-06 [1] CRAN (R 4.4.0)\n httr           1.4.7   2023-08-15 [1] CRAN (R 4.4.0)\n igraph       * 2.0.3   2024-03-13 [1] CRAN (R 4.4.0)\n jsonlite       1.8.8   2023-12-04 [1] CRAN (R 4.4.0)\n KernSmooth     2.23-24 2024-05-17 [4] CRAN (R 4.4.0)\n knitr          1.47    2024-05-29 [1] CRAN (R 4.4.0)\n labeling       0.4.3   2023-08-29 [1] CRAN (R 4.4.0)\n lattice        0.22-5  2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle      1.0.4   2023-11-07 [1] CRAN (R 4.4.0)\n magrittr       2.0.3   2022-03-30 [1] CRAN (R 4.4.0)\n MASS           7.3-60  2023-05-04 [4] CRAN (R 4.3.1)\n Matrix         1.6-5   2024-01-11 [4] CRAN (R 4.3.3)\n memoise        2.0.1   2021-11-26 [1] CRAN (R 4.4.0)\n munsell        0.5.1   2024-04-01 [1] CRAN (R 4.4.0)\n pillar         1.9.0   2023-03-22 [1] CRAN (R 4.4.0)\n pkgconfig      2.0.3   2019-09-22 [1] CRAN (R 4.4.0)\n png            0.1-8   2022-11-29 [1] CRAN (R 4.4.0)\n polyclip       1.10-6  2023-09-27 [1] CRAN (R 4.4.0)\n proxy          0.4-27  2022-06-09 [1] CRAN (R 4.4.0)\n purrr          1.0.2   2023-08-10 [1] CRAN (R 4.4.0)\n R6             2.5.1   2021-08-19 [1] CRAN (R 4.4.0)\n Rcpp           1.0.12  2024-01-09 [1] CRAN (R 4.4.0)\n reticulate     1.37.0  2024-05-21 [1] CRAN (R 4.4.0)\n rlang          1.1.4   2024-06-04 [1] CRAN (R 4.4.0)\n rmarkdown      2.27    2024-05-17 [1] CRAN (R 4.4.0)\n rstudioapi     0.16.0  2024-03-24 [1] CRAN (R 4.4.0)\n scales         1.3.0   2023-11-28 [1] CRAN (R 4.4.0)\n sessioninfo    1.2.2   2021-12-06 [1] CRAN (R 4.4.0)\n sf           * 1.0-16  2024-03-24 [1] CRAN (R 4.4.0)\n tibble         3.2.1   2023-03-20 [1] CRAN (R 4.4.0)\n tidygraph      1.3.1   2024-01-30 [1] CRAN (R 4.4.0)\n tidyr          1.3.1   2024-01-24 [1] CRAN (R 4.4.0)\n tidyselect     1.2.1   2024-03-11 [1] CRAN (R 4.4.0)\n tweenr         2.0.3   2024-02-26 [1] CRAN (R 4.4.0)\n units          0.8-5   2023-11-28 [1] CRAN (R 4.4.0)\n utf8           1.2.4   2023-10-22 [1] CRAN (R 4.4.0)\n vctrs          0.6.5   2023-12-01 [1] CRAN (R 4.4.0)\n viridis        0.6.5   2024-01-29 [1] CRAN (R 4.4.0)\n viridisLite    0.4.2   2023-05-02 [1] CRAN (R 4.4.0)\n withr          3.0.0   2024-01-16 [1] CRAN (R 4.4.0)\n xfun           0.44    2024-05-15 [1] CRAN (R 4.4.0)\n yaml           2.3.8   2023-12-11 [1] CRAN (R 4.4.0)\n\n [1] /home/raphael/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "hospital_admissions_flow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}