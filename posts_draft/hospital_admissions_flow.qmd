---
title: "Handling 187,735,977 hospital admissions in Brazil with DuckDB"
subtitle: "A patient geographical flow study"
date: "2024-06-10"
categories: [duckdb, sih]
---

On ideal circumstances, hospital admission will take place at the same city of residence of the patient. This would facilitate the patient and family dislocation to the hospital, making the whole process less stressful. But, to a management point of view, this would require that all cities present a full, comprehensive and extremely expensive set of hospital units, able to take care from simple diagnosis to complex organs transfusions.

Thus, a national health system is usually organized with hierarchy and centralization principles. This makes that more complex health treatments are available only on certain cities that are usually bigger. This optimization of the healthcare network comes with a cost: for some situations, the patient will need to receive its health treatment in a different city, creating a flow of patients seeking for health care.

We will study here the flow of patients for hospital admissions using Brazilian datasets from its Universal Health System (SUS). This data is originally created and maintained by DataSUS, the informatics department of the Brazilian Health Ministry.

## Dataset

We will use the data from Hospital Admissions prepared by the [PCDaS/Fiocruz](https://pcdas.icict.fiocruz.br) with the original DataSUS data. The dataset is already cleaned, enriched and fully documented. I downloaded the CSV version, which contains 5,210 files, totalling 315.7 GB.

On these files, each row represents a hospital admission, and several variable of interest are available, including the patient's municipality code of residence, the hospital's code municipality and the date of the hospital admission.

It is a lot of data, making very unpractical to just load the files into the computer memory. The [DuckDB](https://duckdb.org/) database is very interesting for this case:

-   You do not need access to a database server, the database is a just a file.

-   DuckDB have dedicated functions to parse and import CSV files directly to the database.

-   It is very fast for aggregate and other analytical functions that needs to access all rows.

-   It is seamless integrated with R and dplyr verbs.

## Database creation

First, we need to call some packages and create the database and a table.

```{r}
library(duckdb)
library(duckplyr)
library(glue)
```

```{r}
#| eval: false
con <- dbConnect(duckdb(), dbdir = "pcdas_sih.duckdb", read_only = FALSE) #<1>

dbExecute(con, "CREATE TABLE sih (
    cod_res VARCHAR,
    cod_int VARCHAR,
    dt_inter DATE,
    def_ident VARCHAR,
    def_car_int VARCHAR
)")  #<2>
```

1.  Create the empty database.
2.  Create the `sih` table with a schema.

Now, we will populate the `sih` table with a loop.

```{r}
#| eval: false
years <- 2008:2023

for(y in years){
  message(y)
  query <- glue("INSERT INTO sih 
          SELECT res_codigo_adotado AS cod_res, 
          int_MUNCOD AS cod_int, 
          DT_INTER AS dt_inter, def_ident, def_car_int 
          FROM read_csv('/media/raphael/lacie/pcdas_sih/csv/*[y]*.csv',
          delim = ',',
          header = true,
          dateformat = '%Y%m%d',
          types = {'res_codigo_adotado': 'VARCHAR',
          'int_MUNCOD': 'VARCHAR',
          'dt_inter': 'DATE',
          'def_ident': 'VARCHAR',
          'def_car_int': 'VARCHAR'},
          union_by_name = true
          )", .open = "[", .close = "]")
  
  dbExecute(con, query)
}

dbDisconnect(con)
```

The query may seem a little complicated, but it is simple if we look at it by parts:

1.  For each year `y` from 2008 to 2023...
2.  Using the connection `con`, INSERT INTO the table `sih` the selected columns (changing its original names) FROM the csv files. This is achieved with the DuckDB's function `read_csv`. Here, DuckDB will parse the CSV files contents that have the year `y` on its name (*`[y]`*`.csv`).

::: callout-tip
I tried to read all 5,210 files at once, but I received messages about "Too many files empty". This loop required less files to be open at the same time, being very effective.
:::

One nice thing here is that we are reading into our table only the variables we want from the CSV files, reducing the database size and saving time.

Our database has 829MB on disk and the `sih` table have 187,735,977 rows.

## Flow computation

Let's compute the yearly flow of patients starting on 2019 to observe the Covid-19 pandemic effects on the following years.

To compute the amount of patients that goes from a municipality to another, we will do a grouping operation and observe the number of rows on each group.

```{r}
#| message: false
con <- dbConnect(duckdb(), dbdir = "../../flowsus/pcdas_sih.duckdb", read_only = FALSE) #<1>

sih_tbl <- dplyr::tbl(con, "sih") #<2>

res_geral <- sih_tbl |> #<3>
  filter(def_ident == "Normal") |> #<4>
  filter(year(dt_inter) >= 2019 & year(dt_inter) <= 2023) |> #<4>
  mutate(year = year(dt_inter)) |> #<5>
  summarise( #<56
    freq = n(), #<6>
    .by = c(year, cod_res, cod_int) #<6>
  ) |> #<6>
  collect() #<7>

dbDisconnect(con) #<8>
```

1.  Connect with the database on read only mode.
2.  Create a virtual connection to the `sih` table.
3.  `res_geral` will be the object that will receive the results.
4.  Filter the hospital admissions, considering only the typical admissions (this excludes long-stays admissions, like mental healthcare) and filter hospital admissions that took place between 2019 and 2023.
5.  Create a new variable: the year of the hospital admission.
6.  Summarize the table, by year and municipality of residence and destination, creating a `freq` variable that will receive the amount with rows.
7.  Executes the query on the DuckDB database, returning a tibble ready-to-use.
8.  Disconnect the database.

The `res_geral` tibble present 508,304 rows.

```{r}
head(res_geral)
```

::: callout-note
Observe that there are combinations where the municipality of origin and destiny are the same. This represents the hospital admissions that took place at the same municipality of residence of the patient.
:::

Discarding these loop-cases, the biggest observed flow occured on 2021, when 28,375 hospital admissions occurred with patients from JaboatÃ£o dos Guararapes, PE being admitted on hospitals from Recife, PE.

```{r}
res_geral |> 
  filter(cod_res != cod_int) |>
  arrange(-freq) |>
  head(10)
```

## Map

This deserves a map! First, we will need more packages.

```{r}
#| message: false
library(geobr)
library(sf)
library(edgebundle)
library(igraph)
library(ggplot2)
```

For the map, we will need the geographical coordinates of the municipalities and the state boundaries. The [geobr](https://ipeagit.github.io/geobr/) package is very handy for this.

```{r}
seats <- read_municipal_seat(showProgress = FALSE) |>
  mutate(code_muni = substr(code_muni, 0, 6))

states <- read_state(showProgress = FALSE)
```

Prepare the municipal seats database.

```{r}
seats <- seats |>
  mutate(code_muni = substr(code_muni, 0, 6)) |>
  mutate(longitude = st_coordinates(seats)[,1],
         latitude = st_coordinates(seats)[,2]) |>
  st_drop_geometry() |>
  select(code_muni, longitude, latitude)

head(seats)
```

And prepare the flow data for each year.

```{r}
res_2019 <- res_geral |>
  filter(cod_res %in% seats$code_muni & cod_int %in% seats$code_muni) |>
  filter(cod_res != cod_int) |>
  filter(year == 2019) |>
  select(2:4)

res_2020 <- res_geral |>
  filter(cod_res %in% seats$code_muni & cod_int %in% seats$code_muni) |>
  filter(cod_res != cod_int) |>
  filter(year == 2020) |>
  select(2:4)

res_2021 <- res_geral |>
  filter(cod_res %in% seats$code_muni & cod_int %in% seats$code_muni) |>
  filter(cod_res != cod_int) |>
  filter(year == 2021) |>
  select(2:4)

res_2022 <- res_geral |>
  filter(cod_res %in% seats$code_muni & cod_int %in% seats$code_muni) |>
  filter(cod_res != cod_int) |>
  filter(year == 2022) |>
  select(2:4)

res_2023 <- res_geral |>
  filter(cod_res %in% seats$code_muni & cod_int %in% seats$code_muni) |>
  filter(cod_res != cod_int) |>
  filter(year == 2023) |>
  select(2:4)

head(res_2023)
```

Now, we will create igraph objects for each year.

```{r}
g_2019 <- graph_from_data_frame(d = res_2019, directed = TRUE, vertices = seats)

g_2020 <- graph_from_data_frame(d = res_2020, directed = TRUE, vertices = seats)

g_2021 <- graph_from_data_frame(d = res_2021, directed = TRUE, vertices = seats)

g_2022 <- graph_from_data_frame(d = res_2022, directed = TRUE, vertices = seats)

g_2023 <- graph_from_data_frame(d = res_2023, directed = TRUE, vertices = seats)
```

And pairs of coordinates and vertices objects.

```{r}
xy_2019 <- cbind(V(g_2019)$longitude, V(g_2019)$latitude)
verts_2019 <- data.frame(x = V(g_2019)$longitude, y = V(g_2019)$latitude)

xy_2020 <- cbind(V(g_2020)$longitude, V(g_2020)$latitude)
verts_2020 <- data.frame(x = V(g_2020)$longitude, y = V(g_2020)$latitude)

xy_2021 <- cbind(V(g_2021)$longitude, V(g_2021)$latitude)
verts_2021 <- data.frame(x = V(g_2021)$longitude, y = V(g_2021)$latitude)

xy_2022 <- cbind(V(g_2022)$longitude, V(g_2022)$latitude)
verts_2022 <- data.frame(x = V(g_2022)$longitude, y = V(g_2022)$latitude)

xy_2023 <- cbind(V(g_2023)$longitude, V(g_2023)$latitude)
verts_2023 <- data.frame(x = V(g_2023)$longitude, y = V(g_2023)$latitude)
```

To plot the vertices, we will use a nice function from the [edgebundle](https://schochastics.github.io/edgebundle/) package. This will take several minutes to be computed.

```{r}
pbundle_2019 <- edge_bundle_path(g_2019, xy_2019, max_distortion = 12, weight_fac = 2, segments = 50)

# pbundle_2020 <- edge_bundle_path(g_2020, xy_2020, max_distortion = 12, weight_fac = 2, segments = 50)
# 
# pbundle_2021 <- edge_bundle_path(g_2021, xy_2021, max_distortion = 12, weight_fac = 2, segments = 50)
# 
# pbundle_2022 <- edge_bundle_path(g_2022, xy_2022, max_distortion = 12, weight_fac = 2, segments = 50)
# 
# pbundle_2023 <- edge_bundle_path(g_2023, xy_2023, max_distortion = 12, weight_fac = 2, segments = 50)
```

Now, all needed objects are ready. Let's plot it.

```{r}
#| column: page

ggplot() +
  geom_sf(
    data = states,
    col = "white", linewidth = 0.1, fill = NA
  ) +
  geom_path(
    data = pbundle_2019, aes(x, y, group = group),
    col = "#9d0191", linewidth = 0.05
  ) +
  geom_path(
    data = pbundle_2019, aes(x, y, group = group),
    col = "white", linewidth = 0.005
  ) +
  geom_point(
    data = verts_2019, aes(x, y),
    col = "#9d0191", size = 0.25
  ) +
  geom_point(
    data = verts_2019, aes(x, y),
    col = "white", size = 0.25, alpha = 0.5
  ) +
  geom_point(
    data = verts_2019[verts_2019$name != "", ], aes(x, y),
    col = "white", size = 3, alpha = 1
  )  +
  labs(title = "Patient's flow for hospital admission", subtitle = "2019") +
  ggraph::theme_graph(background = "black") +
  theme(plot.title = element_text(color = "white"))
```

```{r}
#| column: page
#| eval: false

ggplot() +
  geom_sf(
    data = states,
    col = "white", linewidth = 0.1, fill = NA
  ) +
  geom_path(
    data = pbundle_2020, aes(x, y, group = group),
    col = "#9d0191", linewidth = 0.05
  ) +
  geom_path(
    data = pbundle_2020, aes(x, y, group = group),
    col = "white", linewidth = 0.005
  ) +
  geom_point(
    data = verts_2020, aes(x, y),
    col = "#9d0191", size = 0.25
  ) +
  geom_point(
    data = verts_2020, aes(x, y),
    col = "white", size = 0.25, alpha = 0.5
  ) +
  geom_point(
    data = verts_2020[verts_2020$name != "", ], aes(x, y),
    col = "white", size = 3, alpha = 1
  )  +
  labs(title = "Patient's flow for hospital admission", subtitle = "2020") +
  ggraph::theme_graph(background = "black") +
  theme(plot.title = element_text(color = "white"))
```

```{r}
#| column: page
#| eval: false

ggplot() +
  geom_sf(
    data = states,
    col = "white", linewidth = 0.1, fill = NA
  ) +
  geom_path(
    data = pbundle_2021, aes(x, y, group = group),
    col = "#9d0191", linewidth = 0.05
  ) +
  geom_path(
    data = pbundle_2021, aes(x, y, group = group),
    col = "white", linewidth = 0.005
  ) +
  geom_point(
    data = verts_2021, aes(x, y),
    col = "#9d0191", size = 0.25
  ) +
  geom_point(
    data = verts_2021, aes(x, y),
    col = "white", size = 0.25, alpha = 0.5
  ) +
  geom_point(
    data = verts_2021[verts_2021$name != "", ], aes(x, y),
    col = "white", size = 3, alpha = 1
  )  +
  labs(title = "Patient's flow for hospital admission", subtitle = "2019") +
  ggraph::theme_graph(background = "black") +
  theme(plot.title = element_text(color = "white"))
```

```{r}
#| column: page
#| eval: false

ggplot() +
  geom_sf(
    data = states,
    col = "white", linewidth = 0.1, fill = NA
  ) +
  geom_path(
    data = pbundle_2022, aes(x, y, group = group),
    col = "#9d0191", linewidth = 0.05
  ) +
  geom_path(
    data = pbundle_2022, aes(x, y, group = group),
    col = "white", linewidth = 0.005
  ) +
  geom_point(
    data = verts_2022, aes(x, y),
    col = "#9d0191", size = 0.25
  ) +
  geom_point(
    data = verts_2022, aes(x, y),
    col = "white", size = 0.25, alpha = 0.5
  ) +
  geom_point(
    data = verts_2022[verts_2022$name != "", ], aes(x, y),
    col = "white", size = 3, alpha = 1
  )  +
  labs(title = "Patient's flow for hospital admission", subtitle = "2022") +
  ggraph::theme_graph(background = "black") +
  theme(plot.title = element_text(color = "white"))
```

```{r}
#| column: page
#| eval: false

ggplot() +
  geom_sf(
    data = states,
    col = "white", linewidth = 0.1, fill = NA
  ) +
  geom_path(
    data = pbundle_2023, aes(x, y, group = group),
    col = "#9d0191", linewidth = 0.05
  ) +
  geom_path(
    data = pbundle_2023, aes(x, y, group = group),
    col = "white", linewidth = 0.005
  ) +
  geom_point(
    data = verts_2023, aes(x, y),
    col = "#9d0191", size = 0.25
  ) +
  geom_point(
    data = verts_2023, aes(x, y),
    col = "white", size = 0.25, alpha = 0.5
  ) +
  geom_point(
    data = verts_2023[verts_2023$name != "", ], aes(x, y),
    col = "white", size = 3, alpha = 1
  )  +
  labs(title = "Patient's flow for hospital admission", subtitle = "2023") +
  ggraph::theme_graph(background = "black") +
  theme(plot.title = element_text(color = "white"))
```

## Session info

```{r}
sessioninfo::session_info()
```
