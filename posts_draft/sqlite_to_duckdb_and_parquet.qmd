---
title: "SQLite database conversion to DuckDB and Parquet files"
date: "2023-10-19"
categories: [database, duckdb, parquet]
---

I will try to cover on this post some steps to convert a SQLite database to [DuckDB](https://duckdb.org) and then export it to [parquet](https://parquet.apache.org).

## SQLite database

Let's use the `mtcars` dataset.

```{r}
#| message: false
library(dplyr)
library(lubridate)

glimpse(mtcars)
```

And write it to an SQLite table.

```{r}
library(DBI)
library(RSQLite)

sqlite_database_file <- tempfile()

conn <- dbConnect(
  RSQLite::SQLite(), 
  sqlite_database_file, 
  extended_types = TRUE
)

dbWriteTable(conn, name = "mtcars_table", value = mtcars, overwrite = TRUE)
```

Let's take a look.

```{r}
tbl(conn, "mtcars_table") %>% head() %>% collect()
```

::: callout-note
Note that this database could be written directly using DuckDB, but this is an example about database conversion.
:::

## From SQLite to DuckDB

First, we need to create our DuckDB database.

```{r}
duckdb_database_file <- tempfile()

conn_duckdb <- dbConnect(
  duckdb::duckdb(), 
  duckdb_database_file
)
```

To import our data, we can use a DuckDB extension to read SQLite databases.

```{r}
dbExecute(conn_duckdb, "INSTALL sqlite;")
dbExecute(conn_duckdb, "LOAD sqlite;")
```

```{r}
dbExecute(conn_duckdb, glue::glue("CREATE TABLE mtcars_table AS SELECT * FROM sqlite_scan('{sqlite_database_file}', 'mtcars_table');"))
```

Great! Now we have the same database on DuckDB.

## From DuckDB to Parquet

It is very simple to export a DuckDB table to a parquet file.

```{r}
parquet_file <- tempfile()

dbExecute(conn_duckdb, glue::glue("COPY (SELECT * FROM 'mtcars_table') TO '{parquet_file}' (FORMAT 'PARQUET')"))
```

And that's it!



## From SQLite to DuckDB, a not so simple example

On the last example, we had a very simple table without dates. But, if we have a table with date or datetime variables, a problem may arise because DuckDB's SQLite extension does not know how to handle with POSIX variables.

We have two solutions:

1.  Convert the date/datetime variable to string before writing it to SQLite, or
2.  Manually convert the POSIX variable in a way that DuckDB can interpret.

LetÂ´s see how to use this second option. For this example, I will use the `flights` dataset.

```{r}
library(nycflights13)
```







This shoul work, but we have an erron being caused by the `departure` variable. The problem is that the DuckDB extension does not know how to handle with the POSIX date format.

To make it work, I developed one approach.

```{r}
dbExecute(conn_duckdb, "SET GLOBAL sqlite_all_varchar=true;")

dbExecute(conn_duckdb, "CREATE TABLE 'flights_table'(year bigint, month bigint, day bigint, hour float, minute float, departure varchar)")

dbExecute(conn2, "INSERT INTO 'flights_table_2' SELECT year, month, day, hour, minute, strftime('%Y-%m-%d', departure*24*60*60, 'unixepoch') FROM 'flights_table'")
```

For this, I planned to use the

This variable is stored as a UNIX time.

First, you need to create a temporary table with the same schema but the date as `varchar`.

```{r}
dbExecute(conn2, "CREATE TABLE 'flights_table_2'(year bigint, month bigint, day bigint, hour float, minute float, departure varchar)")
```

And then copy the data from the original table to this empty table.

```{r}
dbExecute(conn2, "INSERT INTO 'flights_table_2' SELECT year, month, day, hour, minute, strftime('%Y-%m-%d', departure*24*60*60, 'unixepoch') FROM 'flights_table'")
```

Let's see the new table

```{r}
tbl(conn2, "flights_table_2") %>% head() %>% collect()
```

That's it! Let's close the connection, its a good practice.

```{r}
dbDisconnect(conn2)
```
